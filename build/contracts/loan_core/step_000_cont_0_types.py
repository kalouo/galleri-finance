import smartpy as sp

tstorage = sp.TRecord(borrower_note_address = sp.TAddress, collateral_vault_address = sp.TAddress, currency_precision = sp.TBigMap(sp.TAddress, sp.TNat), interest_fee = sp.TNat, lender_note_address = sp.TAddress, loan_id = sp.TNat, loans_by_id = sp.TBigMap(sp.TNat, sp.TRecord(collateral_contract = sp.TAddress, collateral_token_id = sp.TNat, loan_denomination_contract = sp.TAddress, loan_denomination_id = sp.TNat, loan_duration = sp.TInt, loan_origination_timestamp = sp.TTimestamp, loan_principal_amount = sp.TNat, maximum_interest_amount = sp.TNat, time_adjustable_interest = sp.TBool).layout(((("collateral_contract", "collateral_token_id"), ("loan_denomination_contract", "loan_denomination_id")), (("loan_duration", "loan_origination_timestamp"), ("loan_principal_amount", ("maximum_interest_amount", "time_adjustable_interest")))))), owner = sp.TAddress, permitted_currencies = sp.TBigMap(sp.TAddress, sp.TBool), processing_fee = sp.TNat).layout(((("borrower_note_address", "collateral_vault_address"), ("currency_precision", ("interest_fee", "lender_note_address"))), (("loan_id", "loans_by_id"), ("owner", ("permitted_currencies", "processing_fee")))))
tparameter = sp.TVariant(claim = sp.TNat, repay = sp.TNat, set_collateral_vault = sp.TAddress, set_interest_fee = sp.TNat, set_loan_note_contracts = sp.TRecord(borrower_note_address = sp.TAddress, lender_note_address = sp.TAddress).layout(("borrower_note_address", "lender_note_address")), set_processing_fee = sp.TNat, start_loan = sp.TRecord(borrower = sp.TAddress, collateral_contract = sp.TAddress, collateral_token_id = sp.TNat, lender = sp.TAddress, loan_denomination_contract = sp.TAddress, loan_denomination_id = sp.TNat, loan_duration = sp.TInt, loan_principal_amount = sp.TNat, maximum_interest_amount = sp.TNat, time_adjustable_interest = sp.TBool).layout(((("borrower", "collateral_contract"), ("collateral_token_id", ("lender", "loan_denomination_contract"))), (("loan_denomination_id", "loan_duration"), ("loan_principal_amount", ("maximum_interest_amount", "time_adjustable_interest"))))), whitelist_currency = sp.TRecord(currency = sp.TAddress, precision = sp.TNat).layout(("currency", "precision"))).layout(((("claim", "repay"), ("set_collateral_vault", "set_interest_fee")), (("set_loan_note_contracts", "set_processing_fee"), ("start_loan", "whitelist_currency"))))
tprivates = { "_compute_interest_rate": sp.TLambda(sp.TRecord(currency_precision = sp.TNat, loan_duration = sp.TInt, loan_origination_timestamp = sp.TTimestamp, maximum_interest_amount = sp.TNat, time_adjustable_interest = sp.TBool).layout((("currency_precision", "loan_duration"), ("loan_origination_timestamp", ("maximum_interest_amount", "time_adjustable_interest")))), sp.TNat) }
tviews = { "get_loan_by_id": (sp.TNat, sp.TRecord(collateral_contract = sp.TAddress, collateral_token_id = sp.TNat, loan_denomination_contract = sp.TAddress, loan_denomination_id = sp.TNat, loan_duration = sp.TInt, loan_origination_timestamp = sp.TTimestamp, loan_principal_amount = sp.TNat, maximum_interest_amount = sp.TNat, time_adjustable_interest = sp.TBool).layout(((("collateral_contract", "collateral_token_id"), ("loan_denomination_contract", "loan_denomination_id")), (("loan_duration", "loan_origination_timestamp"), ("loan_principal_amount", ("maximum_interest_amount", "time_adjustable_interest")))))) }
