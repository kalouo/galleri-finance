parameter (or (or (or (nat %claim) (nat %repay)) (or (address %set_collateral_vault) (nat %set_interest_fee))) (or (or (pair %set_loan_note_contracts (address %borrower_note_address) (address %lender_note_address)) (nat %set_processing_fee)) (or (pair %start_loan (pair (pair (address %borrower) (address %collateral_contract)) (pair (nat %collateral_token_id) (pair (address %lender) (address %loan_denomination_contract)))) (pair (pair (nat %loan_denomination_id) (int %loan_duration)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) (pair %whitelist_currency (address %currency) (nat %precision)))));
storage   (pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)))));
code
  {
    # Private variable: _compute_interest_rate # pair @parameter @storage
    LAMBDA
      (pair (pair nat int) (pair timestamp (pair nat bool)))
      nat
      {
        # if _x0.time_adjustable_interest == True: # pair (pair nat int) (pair timestamp (pair nat bool))
        DUP;        # pair (pair nat int) (pair timestamp (pair nat bool)) : pair (pair nat int) (pair timestamp (pair nat bool))
        GET 6;      # bool : pair (pair nat int) (pair timestamp (pair nat bool))
        PUSH bool True; # bool : bool : pair (pair nat int) (pair timestamp (pair nat bool))
        COMPARE;    # int : pair (pair nat int) (pair timestamp (pair nat bool))
        EQ;         # bool : pair (pair nat int) (pair timestamp (pair nat bool))
        IF
          {
            # sp.result((_x0.maximum_interest_amount * ((((sp.as_nat(sp.now - _x0.loan_origination_timestamp) * 10000) // sp.as_nat(_x0.loan_duration)) * _x0.currency_precision) // 10000)) // _x0.currency_precision) # pair (pair nat int) (pair timestamp (pair nat bool))
            DUP;        # pair (pair nat int) (pair timestamp (pair nat bool)) : pair (pair nat int) (pair timestamp (pair nat bool))
            CAR;        # pair nat int : pair (pair nat int) (pair timestamp (pair nat bool))
            CAR;        # nat : pair (pair nat int) (pair timestamp (pair nat bool))
            PUSH nat 10000; # nat : nat : pair (pair nat int) (pair timestamp (pair nat bool))
            DIG 2;      # pair (pair nat int) (pair timestamp (pair nat bool)) : nat : nat
            DUP;        # pair (pair nat int) (pair timestamp (pair nat bool)) : pair (pair nat int) (pair timestamp (pair nat bool)) : nat : nat
            CAR;        # pair nat int : pair (pair nat int) (pair timestamp (pair nat bool)) : nat : nat
            CAR;        # nat : pair (pair nat int) (pair timestamp (pair nat bool)) : nat : nat
            SWAP;       # pair (pair nat int) (pair timestamp (pair nat bool)) : nat : nat : nat
            DUP;        # pair (pair nat int) (pair timestamp (pair nat bool)) : pair (pair nat int) (pair timestamp (pair nat bool)) : nat : nat : nat
            DUG 4;      # pair (pair nat int) (pair timestamp (pair nat bool)) : nat : nat : nat : pair (pair nat int) (pair timestamp (pair nat bool))
            CAR;        # pair nat int : nat : nat : nat : pair (pair nat int) (pair timestamp (pair nat bool))
            CDR;        # int : nat : nat : nat : pair (pair nat int) (pair timestamp (pair nat bool))
            ISNAT;      # option nat : nat : nat : nat : pair (pair nat int) (pair timestamp (pair nat bool))
            IF_NONE
              {
                PUSH int 277; # int : nat : nat : nat : pair (pair nat int) (pair timestamp (pair nat bool))
                FAILWITH;   # FAILED
              }
              {}; # @some : nat : nat : nat : pair (pair nat int) (pair timestamp (pair nat bool))
            PUSH nat 10000; # nat : @some : nat : nat : nat : pair (pair nat int) (pair timestamp (pair nat bool))
            DUP 6;      # pair (pair nat int) (pair timestamp (pair nat bool)) : nat : @some : nat : nat : nat : pair (pair nat int) (pair timestamp (pair nat bool))
            GET 3;      # timestamp : nat : @some : nat : nat : nat : pair (pair nat int) (pair timestamp (pair nat bool))
            NOW;        # @now : timestamp : nat : @some : nat : nat : nat : pair (pair nat int) (pair timestamp (pair nat bool))
            SUB;        # int : nat : @some : nat : nat : nat : pair (pair nat int) (pair timestamp (pair nat bool))
            ISNAT;      # option nat : nat : @some : nat : nat : nat : pair (pair nat int) (pair timestamp (pair nat bool))
            IF_NONE
              {
                PUSH int 276; # int : nat : @some : nat : nat : nat : pair (pair nat int) (pair timestamp (pair nat bool))
                FAILWITH;   # FAILED
              }
              {}; # @some : nat : @some : nat : nat : nat : pair (pair nat int) (pair timestamp (pair nat bool))
            MUL;        # nat : @some : nat : nat : nat : pair (pair nat int) (pair timestamp (pair nat bool))
            EDIV;       # option (pair nat nat) : nat : nat : nat : pair (pair nat int) (pair timestamp (pair nat bool))
            IF_NONE
              {
                PUSH int 276; # int : nat : nat : nat : pair (pair nat int) (pair timestamp (pair nat bool))
                FAILWITH;   # FAILED
              }
              {
                CAR;        # nat : nat : nat : nat : pair (pair nat int) (pair timestamp (pair nat bool))
              }; # nat : nat : nat : nat : pair (pair nat int) (pair timestamp (pair nat bool))
            MUL;        # nat : nat : nat : pair (pair nat int) (pair timestamp (pair nat bool))
            EDIV;       # option (pair nat nat) : nat : pair (pair nat int) (pair timestamp (pair nat bool))
            IF_NONE
              {
                PUSH int 301; # int : nat : pair (pair nat int) (pair timestamp (pair nat bool))
                FAILWITH;   # FAILED
              }
              {
                CAR;        # nat : nat : pair (pair nat int) (pair timestamp (pair nat bool))
              }; # nat : nat : pair (pair nat int) (pair timestamp (pair nat bool))
            DIG 2;      # pair (pair nat int) (pair timestamp (pair nat bool)) : nat : nat
            GET 5;      # nat : nat : nat
            MUL;        # nat : nat
            EDIV;       # option (pair nat nat)
            IF_NONE
              {
                PUSH int 302; # int
                FAILWITH;   # FAILED
              }
              {
                CAR;        # nat
              }; # nat
          }
          {
            # sp.result(_x0.maximum_interest_amount) # pair (pair nat int) (pair timestamp (pair nat bool))
            GET 5;      # nat
          }; # nat
      }; # lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : pair @parameter @storage
    SWAP;       # pair @parameter @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
    UNPAIR;     # @parameter : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
    IF_LEFT
      {
        IF_LEFT
          {
            IF_LEFT
              {
                DIG 2;      # lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : @parameter%claim : @storage
                DROP;       # @parameter%claim : @storage
                SWAP;       # @storage : @parameter%claim
                # == claim ==
                # sp.verify(self.data.loans_by_id.contains(params), 'NON-EXISTENT LOAN') # @storage : @parameter%claim
                DUP;        # @storage : @storage : @parameter%claim
                DUG 2;      # @storage : @parameter%claim : @storage
                GET 3;      # pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest)))))) : @parameter%claim : @storage
                CDR;        # big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : @parameter%claim : @storage
                SWAP;       # @parameter%claim : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : @storage
                DUP;        # @parameter%claim : @parameter%claim : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : @storage
                DUG 2;      # @parameter%claim : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : @parameter%claim : @storage
                MEM;        # bool : @parameter%claim : @storage
                IF
                  {}
                  {
                    PUSH string "NON-EXISTENT LOAN"; # string : @parameter%claim : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%claim : @storage
                SWAP;       # @storage : @parameter%claim
                # sp.verify(sp.sender == sp.view("owner_of", self.data.lender_note_address, params, sp.TAddress).open_some(), 'UNAUTHORIZED CALLER') # @storage : @parameter%claim
                DUP;        # @storage : @storage : @parameter%claim
                DUG 2;      # @storage : @parameter%claim : @storage
                CAR;        # pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @parameter%claim : @storage
                GET 6;      # address : @parameter%claim : @storage
                SWAP;       # @parameter%claim : address : @storage
                DUP;        # @parameter%claim : @parameter%claim : address : @storage
                DUG 2;      # @parameter%claim : address : @parameter%claim : @storage
                VIEW "owner_of" address; # option address : @parameter%claim : @storage
                IF_NONE
                  {
                    PUSH int 174; # int : @parameter%claim : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @parameter%claim : @storage
                SENDER;     # @sender : @some : @parameter%claim : @storage
                COMPARE;    # int : @parameter%claim : @storage
                EQ;         # bool : @parameter%claim : @storage
                IF
                  {}
                  {
                    PUSH string "UNAUTHORIZED CALLER"; # string : @parameter%claim : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%claim : @storage
                SWAP;       # @storage : @parameter%claim
                # sp.verify(sp.now > sp.add_seconds(self.data.loans_by_id[params].loan_origination_timestamp, self.data.loans_by_id[params].loan_duration), 'NOT_EXPIRED') # @storage : @parameter%claim
                DUP;        # @storage : @storage : @parameter%claim
                DUG 2;      # @storage : @parameter%claim : @storage
                GET 3;      # pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest)))))) : @parameter%claim : @storage
                CDR;        # big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : @parameter%claim : @storage
                SWAP;       # @parameter%claim : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : @storage
                DUP;        # @parameter%claim : @parameter%claim : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : @storage
                DUG 2;      # @parameter%claim : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : @parameter%claim : @storage
                GET;        # option (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : @parameter%claim : @storage
                IF_NONE
                  {
                    PUSH int 172; # int : @parameter%claim : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:172 # @some : @parameter%claim : @storage
                  }; # @some : @parameter%claim : @storage
                GET 3;      # pair (int %loan_duration) (timestamp %loan_origination_timestamp) : @parameter%claim : @storage
                CAR;        # int : @parameter%claim : @storage
                DUP 3;      # @storage : int : @parameter%claim : @storage
                GET 3;      # pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest)))))) : int : @parameter%claim : @storage
                CDR;        # big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : int : @parameter%claim : @storage
                DUP 3;      # @parameter%claim : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : int : @parameter%claim : @storage
                GET;        # option (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : int : @parameter%claim : @storage
                IF_NONE
                  {
                    PUSH int 172; # int : int : @parameter%claim : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:172 # @some : int : @parameter%claim : @storage
                  }; # @some : int : @parameter%claim : @storage
                GET 3;      # pair (int %loan_duration) (timestamp %loan_origination_timestamp) : int : @parameter%claim : @storage
                CDR;        # timestamp : int : @parameter%claim : @storage
                ADD;        # timestamp : @parameter%claim : @storage
                NOW;        # @now : timestamp : @parameter%claim : @storage
                COMPARE;    # int : @parameter%claim : @storage
                GT;         # bool : @parameter%claim : @storage
                IF
                  {}
                  {
                    PUSH string "NOT_EXPIRED"; # string : @parameter%claim : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%claim : @storage
                # sp.transfer(sp.record(deposit_id = params, recipient = sp.view("owner_of", self.data.lender_note_address, params, sp.TAddress).open_some()), sp.tez(0), sp.contract(sp.TRecord(deposit_id = sp.TNat, recipient = sp.TAddress).layout(("deposit_id", "recipient")), self.data.collateral_vault_address, entry_point='withdraw').open_some()) # @parameter%claim : @storage
                NIL operation; # list operation : @parameter%claim : @storage
                DUP 3;      # @storage : list operation : @parameter%claim : @storage
                CAR;        # pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : list operation : @parameter%claim : @storage
                CAR;        # pair (address %borrower_note_address) (address %collateral_vault_address) : list operation : @parameter%claim : @storage
                CDR;        # address : list operation : @parameter%claim : @storage
                CONTRACT %withdraw (pair (nat %deposit_id) (address %recipient)); # option (contract (pair (nat %deposit_id) (address %recipient))) : list operation : @parameter%claim : @storage
                IF_NONE
                  {
                    PUSH int 315; # int : list operation : @parameter%claim : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list operation : @parameter%claim : @storage
                PUSH mutez 0; # mutez : @some : list operation : @parameter%claim : @storage
                DUP 5;      # @storage : mutez : @some : list operation : @parameter%claim : @storage
                CAR;        # pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : mutez : @some : list operation : @parameter%claim : @storage
                GET 6;      # address : mutez : @some : list operation : @parameter%claim : @storage
                DUP 5;      # @parameter%claim : address : mutez : @some : list operation : @parameter%claim : @storage
                VIEW "owner_of" address; # option address : mutez : @some : list operation : @parameter%claim : @storage
                IF_NONE
                  {
                    PUSH int 174; # int : mutez : @some : list operation : @parameter%claim : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : mutez : @some : list operation : @parameter%claim : @storage
                DUP 5;      # @parameter%claim : @some : mutez : @some : list operation : @parameter%claim : @storage
                PAIR;       # pair @parameter%claim @some : mutez : @some : list operation : @parameter%claim : @storage
                TRANSFER_TOKENS; # operation : list operation : @parameter%claim : @storage
                CONS;       # list operation : @parameter%claim : @storage
                # sp.transfer(params, sp.tez(0), sp.contract(sp.TNat, self.data.borrower_note_address, entry_point='burn').open_some()) # list operation : @parameter%claim : @storage
                DUP 3;      # @storage : list operation : @parameter%claim : @storage
                CAR;        # pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : list operation : @parameter%claim : @storage
                CAR;        # pair (address %borrower_note_address) (address %collateral_vault_address) : list operation : @parameter%claim : @storage
                CAR;        # address : list operation : @parameter%claim : @storage
                CONTRACT %burn nat; # option (contract nat) : list operation : @parameter%claim : @storage
                IF_NONE
                  {
                    PUSH int 56; # int : list operation : @parameter%claim : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list operation : @parameter%claim : @storage
                PUSH mutez 0; # mutez : @some : list operation : @parameter%claim : @storage
                DUP 4;      # @parameter%claim : mutez : @some : list operation : @parameter%claim : @storage
                TRANSFER_TOKENS; # operation : list operation : @parameter%claim : @storage
                CONS;       # list operation : @parameter%claim : @storage
                # sp.transfer(params, sp.tez(0), sp.contract(sp.TNat, self.data.lender_note_address, entry_point='burn').open_some()) # list operation : @parameter%claim : @storage
                DUP 3;      # @storage : list operation : @parameter%claim : @storage
                CAR;        # pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : list operation : @parameter%claim : @storage
                GET 6;      # address : list operation : @parameter%claim : @storage
                CONTRACT %burn nat; # option (contract nat) : list operation : @parameter%claim : @storage
                IF_NONE
                  {
                    PUSH int 56; # int : list operation : @parameter%claim : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list operation : @parameter%claim : @storage
                PUSH mutez 0; # mutez : @some : list operation : @parameter%claim : @storage
                DUP 4;      # @parameter%claim : mutez : @some : list operation : @parameter%claim : @storage
                TRANSFER_TOKENS; # operation : list operation : @parameter%claim : @storage
                CONS;       # list operation : @parameter%claim : @storage
                # del self.data.loans_by_id[params] # list operation : @parameter%claim : @storage
                DIG 2;      # @storage : list operation : @parameter%claim
                UNPAIR;     # pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : list operation : @parameter%claim
                SWAP;       # pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : list operation : @parameter%claim
                UNPAIR;     # pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest)))))) : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : list operation : @parameter%claim
                UNPAIR;     # nat : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : list operation : @parameter%claim
                SWAP;       # big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : list operation : @parameter%claim
                NONE (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))); # option (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))) : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : list operation : @parameter%claim
                DIG 6;      # @parameter%claim : option (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))) : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : list operation
                UPDATE;     # big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : list operation
                SWAP;       # nat : big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))) : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : list operation
                PAIR;       # pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool))))) : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : list operation
                PAIR;       # pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : list operation
                SWAP;       # pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : list operation
                PAIR;       # pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)))) : list operation
                SWAP;       # list operation : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
              }
              {
                SWAP;       # @storage : @parameter%repay : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                # == repay ==
                # sp.verify(self.data.loans_by_id.contains(params), 'NON-EXISTENT LOAN') # @storage : @parameter%repay : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP;        # @storage : @storage : @parameter%repay : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUG 2;      # @storage : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 3;      # pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest)))))) : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CDR;        # big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                SWAP;       # @parameter%repay : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP;        # @parameter%repay : @parameter%repay : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUG 2;      # @parameter%repay : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                MEM;        # bool : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                IF
                  {}
                  {
                    PUSH string "NON-EXISTENT LOAN"; # string : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                    FAILWITH;   # FAILED
                  }; # @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                SWAP;       # @storage : @parameter%repay : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                # sp.verify(sp.sender == sp.view("owner_of", self.data.borrower_note_address, params, sp.TAddress).open_some(), 'UNAUTHORIZED CALLER') # @storage : @parameter%repay : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP;        # @storage : @storage : @parameter%repay : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUG 2;      # @storage : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CAR;        # pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CAR;        # pair (address %borrower_note_address) (address %collateral_vault_address) : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CAR;        # address : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                SWAP;       # @parameter%repay : address : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP;        # @parameter%repay : @parameter%repay : address : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUG 2;      # @parameter%repay : address : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                VIEW "owner_of" address; # option address : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                IF_NONE
                  {
                    PUSH int 122; # int : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                SENDER;     # @sender : @some : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                COMPARE;    # int : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                EQ;         # bool : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                IF
                  {}
                  {
                    PUSH string "UNAUTHORIZED CALLER"; # string : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                    FAILWITH;   # FAILED
                  }; # @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                SWAP;       # @storage : @parameter%repay : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                # sp.verify(sp.now <= sp.add_seconds(self.data.loans_by_id[params].loan_origination_timestamp, self.data.loans_by_id[params].loan_duration), 'EXPIRED') # @storage : @parameter%repay : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP;        # @storage : @storage : @parameter%repay : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUG 2;      # @storage : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 3;      # pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest)))))) : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CDR;        # big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                SWAP;       # @parameter%repay : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP;        # @parameter%repay : @parameter%repay : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUG 2;      # @parameter%repay : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET;        # option (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                IF_NONE
                  {
                    PUSH int 115; # int : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:115 # @some : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                  }; # @some : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 3;      # pair (int %loan_duration) (timestamp %loan_origination_timestamp) : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CAR;        # int : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP 3;      # @storage : int : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 3;      # pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest)))))) : int : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CDR;        # big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : int : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP 3;      # @parameter%repay : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : int : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET;        # option (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : int : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                IF_NONE
                  {
                    PUSH int 115; # int : int : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:115 # @some : int : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                  }; # @some : int : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 3;      # pair (int %loan_duration) (timestamp %loan_origination_timestamp) : int : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CDR;        # timestamp : int : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                ADD;        # timestamp : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                NOW;        # @now : timestamp : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                COMPARE;    # int : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                LE;         # bool : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                IF
                  {}
                  {
                    PUSH string "EXPIRED"; # string : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                    FAILWITH;   # FAILED
                  }; # @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                # sp.transfer(sp.list([sp.set_type_expr(sp.record(from_ = sp.view("owner_of", self.data.borrower_note_address, params, sp.TAddress).open_some(), txs = sp.list([sp.record(to_ = sp.self_address, token_id = self.data.loans_by_id[params].loan_denomination_id, amount = self.data.loans_by_id[params].loan_principal_amount + self._compute_interest_rate(sp.record(currency_precision = self.data.currency_precision[self.data.loans_by_id[params].loan_denomination_contract], loan_duration = self.data.loans_by_id[params].loan_duration, loan_origination_timestamp = self.data.loans_by_id[params].loan_origination_timestamp, maximum_interest_amount = self.data.loans_by_id[params].maximum_interest_amount, time_adjustable_interest = self.data.loans_by_id[params].time_adjustable_interest)))])), sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs")))]), sp.tez(0), sp.contract(sp.TList(sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs"))), self.data.loans_by_id[params].loan_denomination_contract, entry_point='transfer').open_some()) # @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                NIL operation; # list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP 3;      # @storage : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 3;      # pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest)))))) : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CDR;        # big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP 3;      # @parameter%repay : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET;        # option (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                IF_NONE
                  {
                    PUSH int 115; # int : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:115 # @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                  }; # @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CAR;        # pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id)) : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 3;      # address : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CONTRACT %transfer (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))); # option (contract (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))))) : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                IF_NONE
                  {
                    PUSH int 82; # int : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                PUSH mutez 0; # mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                NIL (pair address (list (pair address (pair nat nat)))); # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                NIL (pair address (pair nat nat)); # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP 8;      # lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP 8;      # @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 3;      # pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest)))))) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CDR;        # big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP 8;      # @parameter%repay : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET;        # option (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                IF_NONE
                  {
                    PUSH int 115; # int : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:115 # @some : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                  }; # @some : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 8;      # bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP 9;      # @storage : bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 3;      # pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest)))))) : bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CDR;        # big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP 9;      # @parameter%repay : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET;        # option (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                IF_NONE
                  {
                    PUSH int 115; # int : bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:115 # @some : bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                  }; # @some : bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 7;      # nat : bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                PAIR;       # pair nat bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP 9;      # @storage : pair nat bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 3;      # pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest)))))) : pair nat bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CDR;        # big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : pair nat bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP 9;      # @parameter%repay : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : pair nat bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET;        # option (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : pair nat bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                IF_NONE
                  {
                    PUSH int 115; # int : pair nat bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:115 # @some : pair nat bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                  }; # @some : pair nat bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 3;      # pair (int %loan_duration) (timestamp %loan_origination_timestamp) : pair nat bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CDR;        # timestamp : pair nat bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                PAIR;       # pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP 9;      # @storage : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 3;      # pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest)))))) : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CDR;        # big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP 9;      # @parameter%repay : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET;        # option (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                IF_NONE
                  {
                    PUSH int 115; # int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:115 # @some : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                  }; # @some : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 3;      # pair (int %loan_duration) (timestamp %loan_origination_timestamp) : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CAR;        # int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DIG 9;      # @storage : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP;        # @storage : @storage : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CAR;        # pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @storage : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 3;      # big_map address nat : @storage : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                SWAP;       # @storage : big_map address nat : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP;        # @storage : @storage : big_map address nat : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUG 11;     # @storage : big_map address nat : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 3;      # pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest)))))) : big_map address nat : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CDR;        # big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : big_map address nat : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP 11;     # @parameter%repay : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : big_map address nat : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET;        # option (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : big_map address nat : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                IF_NONE
                  {
                    PUSH int 115; # int : big_map address nat : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:115 # @some : big_map address nat : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                  }; # @some : big_map address nat : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CAR;        # pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id)) : big_map address nat : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 3;      # address : big_map address nat : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET;        # option nat : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                IF_NONE
                  {
                    PUSH int 134; # int : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:134 # @some : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                  }; # @some : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                PAIR;       # pair @some int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                PAIR;       # pair (pair @some int) (pair timestamp (pair nat bool)) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                EXEC;       # nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP 8;      # @storage : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 3;      # pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest)))))) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CDR;        # big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP 8;      # @parameter%repay : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET;        # option (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                IF_NONE
                  {
                    PUSH int 115; # int : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:115 # @some : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                  }; # @some : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 5;      # nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                ADD;        # nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP 8;      # @storage : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 3;      # pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest)))))) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CDR;        # big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP 8;      # @parameter%repay : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET;        # option (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                IF_NONE
                  {
                    PUSH int 115; # int : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:115 # @some : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                  }; # @some : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CAR;        # pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id)) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 4;      # nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                SELF_ADDRESS; # @self : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                PAIR 3;     # pair @self (pair nat nat) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CONS;       # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP 7;      # @storage : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CAR;        # pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CAR;        # pair (address %borrower_note_address) (address %collateral_vault_address) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CAR;        # address : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP 7;      # @parameter%repay : address : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                VIEW "owner_of" address; # option address : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                IF_NONE
                  {
                    PUSH int 122; # int : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                PAIR;       # pair @some (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CONS;       # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                TRANSFER_TOKENS; # operation : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CONS;       # list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                # sp.transfer(sp.list([sp.set_type_expr(sp.record(from_ = sp.self_address, txs = sp.list([sp.record(to_ = sp.view("owner_of", self.data.lender_note_address, params, sp.TAddress).open_some(), token_id = self.data.loans_by_id[params].loan_denomination_id, amount = sp.as_nat((self.data.loans_by_id[params].loan_principal_amount + self._compute_interest_rate(sp.record(currency_precision = self.data.currency_precision[self.data.loans_by_id[params].loan_denomination_contract], loan_duration = self.data.loans_by_id[params].loan_duration, loan_origination_timestamp = self.data.loans_by_id[params].loan_origination_timestamp, maximum_interest_amount = self.data.loans_by_id[params].maximum_interest_amount, time_adjustable_interest = self.data.loans_by_id[params].time_adjustable_interest))) - ((self._compute_interest_rate(sp.record(currency_precision = self.data.currency_precision[self.data.loans_by_id[params].loan_denomination_contract], loan_duration = self.data.loans_by_id[params].loan_duration, loan_origination_timestamp = self.data.loans_by_id[params].loan_origination_timestamp, maximum_interest_amount = self.data.loans_by_id[params].maximum_interest_amount, time_adjustable_interest = self.data.loans_by_id[params].time_adjustable_interest)) * ((self.data.interest_fee * self.data.currency_precision[self.data.loans_by_id[params].loan_denomination_contract]) // 10000)) // self.data.currency_precision[self.data.loans_by_id[params].loan_denomination_contract])))])), sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs")))]), sp.tez(0), sp.contract(sp.TList(sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs"))), self.data.loans_by_id[params].loan_denomination_contract, entry_point='transfer').open_some()) # list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP 3;      # @storage : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 3;      # pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest)))))) : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CDR;        # big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP 3;      # @parameter%repay : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET;        # option (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                IF_NONE
                  {
                    PUSH int 115; # int : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:115 # @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                  }; # @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CAR;        # pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id)) : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 3;      # address : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CONTRACT %transfer (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))); # option (contract (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))))) : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                IF_NONE
                  {
                    PUSH int 82; # int : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                PUSH mutez 0; # mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                NIL (pair address (list (pair address (pair nat nat)))); # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                NIL (pair address (pair nat nat)); # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DIG 6;      # @storage : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP;        # @storage : @storage : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CAR;        # pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @storage : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 3;      # big_map address nat : @storage : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                SWAP;       # @storage : big_map address nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP;        # @storage : @storage : big_map address nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUG 8;      # @storage : big_map address nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 3;      # pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest)))))) : big_map address nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CDR;        # big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : big_map address nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP 8;      # @parameter%repay : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : big_map address nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET;        # option (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : big_map address nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                IF_NONE
                  {
                    PUSH int 115; # int : big_map address nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:115 # @some : big_map address nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                  }; # @some : big_map address nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CAR;        # pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id)) : big_map address nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 3;      # address : big_map address nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET;        # option nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                IF_NONE
                  {
                    PUSH int 142; # int : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:142 # @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                  }; # @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                PUSH nat 10000; # nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DIG 8;      # @storage : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP;        # @storage : @storage : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CAR;        # pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @storage : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 3;      # big_map address nat : @storage : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                SWAP;       # @storage : big_map address nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP;        # @storage : @storage : big_map address nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUG 10;     # @storage : big_map address nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 3;      # pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest)))))) : big_map address nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CDR;        # big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : big_map address nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP 10;     # @parameter%repay : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : big_map address nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET;        # option (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : big_map address nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                IF_NONE
                  {
                    PUSH int 115; # int : big_map address nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:115 # @some : big_map address nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                  }; # @some : big_map address nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CAR;        # pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id)) : big_map address nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 3;      # address : big_map address nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET;        # option nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                IF_NONE
                  {
                    PUSH int 142; # int : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:142 # @some : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                  }; # @some : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP 10;     # @storage : @some : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CAR;        # pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @some : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 5;      # nat : @some : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                MUL;        # nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                EDIV;       # option (pair nat nat) : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                IF_NONE
                  {
                    PUSH int 301; # int : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                    FAILWITH;   # FAILED
                  }
                  {
                    CAR;        # nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                  }; # nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP 10;     # lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP 10;     # @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 3;      # pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest)))))) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CDR;        # big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP 10;     # @parameter%repay : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET;        # option (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                IF_NONE
                  {
                    PUSH int 115; # int : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:115 # @some : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                  }; # @some : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 8;      # bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP 11;     # @storage : bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 3;      # pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest)))))) : bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CDR;        # big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP 11;     # @parameter%repay : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET;        # option (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                IF_NONE
                  {
                    PUSH int 115; # int : bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:115 # @some : bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                  }; # @some : bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 7;      # nat : bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                PAIR;       # pair nat bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP 11;     # @storage : pair nat bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 3;      # pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest)))))) : pair nat bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CDR;        # big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : pair nat bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP 11;     # @parameter%repay : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : pair nat bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET;        # option (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : pair nat bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                IF_NONE
                  {
                    PUSH int 115; # int : pair nat bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:115 # @some : pair nat bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                  }; # @some : pair nat bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 3;      # pair (int %loan_duration) (timestamp %loan_origination_timestamp) : pair nat bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CDR;        # timestamp : pair nat bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                PAIR;       # pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP 11;     # @storage : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 3;      # pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest)))))) : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CDR;        # big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP 11;     # @parameter%repay : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET;        # option (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                IF_NONE
                  {
                    PUSH int 115; # int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:115 # @some : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                  }; # @some : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 3;      # pair (int %loan_duration) (timestamp %loan_origination_timestamp) : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CAR;        # int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DIG 11;     # @storage : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP;        # @storage : @storage : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CAR;        # pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @storage : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 3;      # big_map address nat : @storage : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                SWAP;       # @storage : big_map address nat : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP;        # @storage : @storage : big_map address nat : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUG 13;     # @storage : big_map address nat : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 3;      # pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest)))))) : big_map address nat : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CDR;        # big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : big_map address nat : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DUP 13;     # @parameter%repay : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : big_map address nat : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET;        # option (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : big_map address nat : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                IF_NONE
                  {
                    PUSH int 115; # int : big_map address nat : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:115 # @some : big_map address nat : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                  }; # @some : big_map address nat : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                CAR;        # pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id)) : big_map address nat : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET 3;      # address : big_map address nat : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                GET;        # option nat : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                IF_NONE
                  {
                    PUSH int 134; # int : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:134 # @some : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                  }; # @some : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                PAIR;       # pair @some int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                PAIR;       # pair (pair @some int) (pair timestamp (pair nat bool)) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                EXEC;       # nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                MUL;        # nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                EDIV;       # option (pair nat nat) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                IF_NONE
                  {
                    PUSH int 302; # int : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                    FAILWITH;   # FAILED
                  }
                  {
                    CAR;        # nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                  }; # nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat
                DIG 8;      # lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                DUP 9;      # @storage : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                GET 3;      # pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest)))))) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                CDR;        # big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                DUP 9;      # @parameter%repay : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                GET;        # option (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                IF_NONE
                  {
                    PUSH int 115; # int : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:115 # @some : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                  }; # @some : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                GET 8;      # bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                DUP 10;     # @storage : bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                GET 3;      # pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest)))))) : bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                CDR;        # big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                DUP 10;     # @parameter%repay : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                GET;        # option (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                IF_NONE
                  {
                    PUSH int 115; # int : bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:115 # @some : bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                  }; # @some : bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                GET 7;      # nat : bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                PAIR;       # pair nat bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                DUP 10;     # @storage : pair nat bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                GET 3;      # pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest)))))) : pair nat bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                CDR;        # big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : pair nat bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                DUP 10;     # @parameter%repay : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : pair nat bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                GET;        # option (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : pair nat bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                IF_NONE
                  {
                    PUSH int 115; # int : pair nat bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:115 # @some : pair nat bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                  }; # @some : pair nat bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                GET 3;      # pair (int %loan_duration) (timestamp %loan_origination_timestamp) : pair nat bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                CDR;        # timestamp : pair nat bool : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                PAIR;       # pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                DUP 10;     # @storage : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                GET 3;      # pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest)))))) : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                CDR;        # big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                DUP 10;     # @parameter%repay : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                GET;        # option (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                IF_NONE
                  {
                    PUSH int 115; # int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:115 # @some : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                  }; # @some : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                GET 3;      # pair (int %loan_duration) (timestamp %loan_origination_timestamp) : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                CAR;        # int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                DIG 10;     # @storage : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay
                DUP;        # @storage : @storage : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay
                CAR;        # pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @storage : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay
                GET 3;      # big_map address nat : @storage : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay
                SWAP;       # @storage : big_map address nat : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay
                DUP;        # @storage : @storage : big_map address nat : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay
                DUG 12;     # @storage : big_map address nat : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                GET 3;      # pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest)))))) : big_map address nat : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                CDR;        # big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : big_map address nat : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                DUP 12;     # @parameter%repay : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : big_map address nat : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                GET;        # option (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : big_map address nat : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                IF_NONE
                  {
                    PUSH int 115; # int : big_map address nat : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:115 # @some : big_map address nat : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                  }; # @some : big_map address nat : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                CAR;        # pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id)) : big_map address nat : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                GET 3;      # address : big_map address nat : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                GET;        # option nat : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                IF_NONE
                  {
                    PUSH int 134; # int : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:134 # @some : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                  }; # @some : int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                PAIR;       # pair @some int : pair timestamp (pair nat bool) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                PAIR;       # pair (pair @some int) (pair timestamp (pair nat bool)) : lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                EXEC;       # nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                DUP 9;      # @storage : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                GET 3;      # pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest)))))) : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                CDR;        # big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                DUP 9;      # @parameter%repay : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                GET;        # option (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                IF_NONE
                  {
                    PUSH int 115; # int : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:115 # @some : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                  }; # @some : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                GET 5;      # nat : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                ADD;        # nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                SUB;        # int : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                ISNAT;      # option nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                IF_NONE
                  {
                    PUSH int 156; # int : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                DUP 8;      # @storage : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                GET 3;      # pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest)))))) : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                CDR;        # big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                DUP 8;      # @parameter%repay : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                GET;        # option (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                IF_NONE
                  {
                    PUSH int 115; # int : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:115 # @some : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                  }; # @some : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                CAR;        # pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id)) : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                GET 4;      # nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                DUP 9;      # @storage : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                CAR;        # pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                GET 6;      # address : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                DUP 9;      # @parameter%repay : address : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                VIEW "owner_of" address; # option address : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                IF_NONE
                  {
                    PUSH int 117; # int : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                PAIR 3;     # pair @some (pair nat @some) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                CONS;       # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                SELF_ADDRESS; # @self : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                PAIR;       # pair @self (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                CONS;       # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%repay : @storage
                TRANSFER_TOKENS; # operation : list operation : @parameter%repay : @storage
                CONS;       # list operation : @parameter%repay : @storage
                # sp.transfer(sp.record(deposit_id = params, recipient = sp.view("owner_of", self.data.borrower_note_address, params, sp.TAddress).open_some()), sp.tez(0), sp.contract(sp.TRecord(deposit_id = sp.TNat, recipient = sp.TAddress).layout(("deposit_id", "recipient")), self.data.collateral_vault_address, entry_point='withdraw').open_some()) # list operation : @parameter%repay : @storage
                DUP 3;      # @storage : list operation : @parameter%repay : @storage
                CAR;        # pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : list operation : @parameter%repay : @storage
                CAR;        # pair (address %borrower_note_address) (address %collateral_vault_address) : list operation : @parameter%repay : @storage
                CDR;        # address : list operation : @parameter%repay : @storage
                CONTRACT %withdraw (pair (nat %deposit_id) (address %recipient)); # option (contract (pair (nat %deposit_id) (address %recipient))) : list operation : @parameter%repay : @storage
                IF_NONE
                  {
                    PUSH int 315; # int : list operation : @parameter%repay : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list operation : @parameter%repay : @storage
                PUSH mutez 0; # mutez : @some : list operation : @parameter%repay : @storage
                DUP 5;      # @storage : mutez : @some : list operation : @parameter%repay : @storage
                CAR;        # pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : mutez : @some : list operation : @parameter%repay : @storage
                CAR;        # pair (address %borrower_note_address) (address %collateral_vault_address) : mutez : @some : list operation : @parameter%repay : @storage
                CAR;        # address : mutez : @some : list operation : @parameter%repay : @storage
                DUP 5;      # @parameter%repay : address : mutez : @some : list operation : @parameter%repay : @storage
                VIEW "owner_of" address; # option address : mutez : @some : list operation : @parameter%repay : @storage
                IF_NONE
                  {
                    PUSH int 122; # int : mutez : @some : list operation : @parameter%repay : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : mutez : @some : list operation : @parameter%repay : @storage
                DUP 5;      # @parameter%repay : @some : mutez : @some : list operation : @parameter%repay : @storage
                PAIR;       # pair @parameter%repay @some : mutez : @some : list operation : @parameter%repay : @storage
                TRANSFER_TOKENS; # operation : list operation : @parameter%repay : @storage
                CONS;       # list operation : @parameter%repay : @storage
                # sp.transfer(params, sp.tez(0), sp.contract(sp.TNat, self.data.borrower_note_address, entry_point='burn').open_some()) # list operation : @parameter%repay : @storage
                DUP 3;      # @storage : list operation : @parameter%repay : @storage
                CAR;        # pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : list operation : @parameter%repay : @storage
                CAR;        # pair (address %borrower_note_address) (address %collateral_vault_address) : list operation : @parameter%repay : @storage
                CAR;        # address : list operation : @parameter%repay : @storage
                CONTRACT %burn nat; # option (contract nat) : list operation : @parameter%repay : @storage
                IF_NONE
                  {
                    PUSH int 56; # int : list operation : @parameter%repay : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list operation : @parameter%repay : @storage
                PUSH mutez 0; # mutez : @some : list operation : @parameter%repay : @storage
                DUP 4;      # @parameter%repay : mutez : @some : list operation : @parameter%repay : @storage
                TRANSFER_TOKENS; # operation : list operation : @parameter%repay : @storage
                CONS;       # list operation : @parameter%repay : @storage
                # sp.transfer(params, sp.tez(0), sp.contract(sp.TNat, self.data.lender_note_address, entry_point='burn').open_some()) # list operation : @parameter%repay : @storage
                DUP 3;      # @storage : list operation : @parameter%repay : @storage
                CAR;        # pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : list operation : @parameter%repay : @storage
                GET 6;      # address : list operation : @parameter%repay : @storage
                CONTRACT %burn nat; # option (contract nat) : list operation : @parameter%repay : @storage
                IF_NONE
                  {
                    PUSH int 56; # int : list operation : @parameter%repay : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list operation : @parameter%repay : @storage
                PUSH mutez 0; # mutez : @some : list operation : @parameter%repay : @storage
                DUP 4;      # @parameter%repay : mutez : @some : list operation : @parameter%repay : @storage
                TRANSFER_TOKENS; # operation : list operation : @parameter%repay : @storage
                CONS;       # list operation : @parameter%repay : @storage
                # del self.data.loans_by_id[params] # list operation : @parameter%repay : @storage
                DIG 2;      # @storage : list operation : @parameter%repay
                UNPAIR;     # pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : list operation : @parameter%repay
                SWAP;       # pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : list operation : @parameter%repay
                UNPAIR;     # pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest)))))) : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : list operation : @parameter%repay
                UNPAIR;     # nat : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : list operation : @parameter%repay
                SWAP;       # big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : list operation : @parameter%repay
                NONE (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))); # option (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))) : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : list operation : @parameter%repay
                DIG 6;      # @parameter%repay : option (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))) : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : list operation
                UPDATE;     # big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : list operation
                SWAP;       # nat : big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))) : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : list operation
                PAIR;       # pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool))))) : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : list operation
                PAIR;       # pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : list operation
                SWAP;       # pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : list operation
                PAIR;       # pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)))) : list operation
                SWAP;       # list operation : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
              }; # list operation : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
          }
          {
            DIG 2;      # lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : @parameter.left.right : @storage
            DROP;       # @parameter.left.right : @storage
            IF_LEFT
              {
                # == set_collateral_vault ==
                # sp.verify(self.data.owner == sp.sender, 'Ownable: caller is not the owner') # @parameter%set_collateral_vault : @storage
                SENDER;     # @sender : @parameter%set_collateral_vault : @storage
                DUP 3;      # @storage : @sender : @parameter%set_collateral_vault : @storage
                GET 5;      # address : @sender : @parameter%set_collateral_vault : @storage
                COMPARE;    # int : @parameter%set_collateral_vault : @storage
                EQ;         # bool : @parameter%set_collateral_vault : @storage
                IF
                  {}
                  {
                    PUSH string "Ownable: caller is not the owner"; # string : @parameter%set_collateral_vault : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%set_collateral_vault : @storage
                SWAP;       # @storage : @parameter%set_collateral_vault
                # self.data.collateral_vault_address = params # @storage : @parameter%set_collateral_vault
                UNPAIR;     # pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : @parameter%set_collateral_vault
                UNPAIR;     # pair (address %borrower_note_address) (address %collateral_vault_address) : pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : @parameter%set_collateral_vault
                CAR;        # address : pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : @parameter%set_collateral_vault
                DIG 3;      # @parameter%set_collateral_vault : address : pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)))
                SWAP;       # address : @parameter%set_collateral_vault : pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)))
                PAIR;       # pair address @parameter%set_collateral_vault : pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)))
                PAIR;       # pair (pair address @parameter%set_collateral_vault) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)))
                PAIR;       # pair (pair (pair address @parameter%set_collateral_vault) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
              }
              {
                # == set_interest_fee ==
                # sp.verify(self.data.owner == sp.sender, 'Ownable: caller is not the owner') # @parameter%set_interest_fee : @storage
                SENDER;     # @sender : @parameter%set_interest_fee : @storage
                DUP 3;      # @storage : @sender : @parameter%set_interest_fee : @storage
                GET 5;      # address : @sender : @parameter%set_interest_fee : @storage
                COMPARE;    # int : @parameter%set_interest_fee : @storage
                EQ;         # bool : @parameter%set_interest_fee : @storage
                IF
                  {}
                  {
                    PUSH string "Ownable: caller is not the owner"; # string : @parameter%set_interest_fee : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%set_interest_fee : @storage
                # sp.verify(params <= 2000, 'INVALID_FEE') # @parameter%set_interest_fee : @storage
                DUP;        # @parameter%set_interest_fee : @parameter%set_interest_fee : @storage
                PUSH nat 2000; # nat : @parameter%set_interest_fee : @parameter%set_interest_fee : @storage
                SWAP;       # @parameter%set_interest_fee : nat : @parameter%set_interest_fee : @storage
                COMPARE;    # int : @parameter%set_interest_fee : @storage
                LE;         # bool : @parameter%set_interest_fee : @storage
                IF
                  {}
                  {
                    PUSH string "INVALID_FEE"; # string : @parameter%set_interest_fee : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%set_interest_fee : @storage
                SWAP;       # @storage : @parameter%set_interest_fee
                # self.data.interest_fee = params # @storage : @parameter%set_interest_fee
                UNPAIR;     # pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : @parameter%set_interest_fee
                UNPAIR;     # pair (address %borrower_note_address) (address %collateral_vault_address) : pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : @parameter%set_interest_fee
                SWAP;       # pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)) : pair (address %borrower_note_address) (address %collateral_vault_address) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : @parameter%set_interest_fee
                UNPAIR;     # big_map address nat : pair (nat %interest_fee) (address %lender_note_address) : pair (address %borrower_note_address) (address %collateral_vault_address) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : @parameter%set_interest_fee
                SWAP;       # pair (nat %interest_fee) (address %lender_note_address) : big_map address nat : pair (address %borrower_note_address) (address %collateral_vault_address) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : @parameter%set_interest_fee
                CDR;        # address : big_map address nat : pair (address %borrower_note_address) (address %collateral_vault_address) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : @parameter%set_interest_fee
                DIG 4;      # @parameter%set_interest_fee : address : big_map address nat : pair (address %borrower_note_address) (address %collateral_vault_address) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)))
                PAIR;       # pair @parameter%set_interest_fee address : big_map address nat : pair (address %borrower_note_address) (address %collateral_vault_address) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)))
                SWAP;       # big_map address nat : pair @parameter%set_interest_fee address : pair (address %borrower_note_address) (address %collateral_vault_address) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)))
                PAIR;       # pair (big_map address nat) (pair @parameter%set_interest_fee address) : pair (address %borrower_note_address) (address %collateral_vault_address) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)))
                SWAP;       # pair (address %borrower_note_address) (address %collateral_vault_address) : pair (big_map address nat) (pair @parameter%set_interest_fee address) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)))
                PAIR;       # pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map address nat) (pair @parameter%set_interest_fee address)) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)))
                PAIR;       # pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map address nat) (pair @parameter%set_interest_fee address))) (pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
              }; # pair (pair (pair address address) (pair (big_map address nat) (pair nat address))) (pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
            NIL operation; # list operation : pair (pair (pair address address) (pair (big_map address nat) (pair nat address))) (pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
          }; # list operation : pair (pair (pair address address) (pair (big_map address nat) (pair nat address))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
      }
      {
        IF_LEFT
          {
            DIG 2;      # lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : @parameter.right.left : @storage
            DROP;       # @parameter.right.left : @storage
            IF_LEFT
              {
                # == set_loan_note_contracts ==
                # sp.verify(self.data.owner == sp.sender, 'Ownable: caller is not the owner') # @parameter%set_loan_note_contracts : @storage
                SENDER;     # @sender : @parameter%set_loan_note_contracts : @storage
                DUP 3;      # @storage : @sender : @parameter%set_loan_note_contracts : @storage
                GET 5;      # address : @sender : @parameter%set_loan_note_contracts : @storage
                COMPARE;    # int : @parameter%set_loan_note_contracts : @storage
                EQ;         # bool : @parameter%set_loan_note_contracts : @storage
                IF
                  {}
                  {
                    PUSH string "Ownable: caller is not the owner"; # string : @parameter%set_loan_note_contracts : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%set_loan_note_contracts : @storage
                SWAP;       # @storage : @parameter%set_loan_note_contracts
                # self.data.lender_note_address = params.lender_note_address # @storage : @parameter%set_loan_note_contracts
                UNPAIR;     # pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : @parameter%set_loan_note_contracts
                UNPAIR;     # pair (address %borrower_note_address) (address %collateral_vault_address) : pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : @parameter%set_loan_note_contracts
                SWAP;       # pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)) : pair (address %borrower_note_address) (address %collateral_vault_address) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : @parameter%set_loan_note_contracts
                UNPAIR;     # big_map address nat : pair (nat %interest_fee) (address %lender_note_address) : pair (address %borrower_note_address) (address %collateral_vault_address) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : @parameter%set_loan_note_contracts
                SWAP;       # pair (nat %interest_fee) (address %lender_note_address) : big_map address nat : pair (address %borrower_note_address) (address %collateral_vault_address) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : @parameter%set_loan_note_contracts
                CAR;        # nat : big_map address nat : pair (address %borrower_note_address) (address %collateral_vault_address) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : @parameter%set_loan_note_contracts
                DUP 5;      # @parameter%set_loan_note_contracts : nat : big_map address nat : pair (address %borrower_note_address) (address %collateral_vault_address) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : @parameter%set_loan_note_contracts
                CDR;        # address : nat : big_map address nat : pair (address %borrower_note_address) (address %collateral_vault_address) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : @parameter%set_loan_note_contracts
                SWAP;       # nat : address : big_map address nat : pair (address %borrower_note_address) (address %collateral_vault_address) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : @parameter%set_loan_note_contracts
                PAIR;       # pair nat address : big_map address nat : pair (address %borrower_note_address) (address %collateral_vault_address) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : @parameter%set_loan_note_contracts
                SWAP;       # big_map address nat : pair nat address : pair (address %borrower_note_address) (address %collateral_vault_address) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : @parameter%set_loan_note_contracts
                PAIR;       # pair (big_map address nat) (pair nat address) : pair (address %borrower_note_address) (address %collateral_vault_address) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : @parameter%set_loan_note_contracts
                SWAP;       # pair (address %borrower_note_address) (address %collateral_vault_address) : pair (big_map address nat) (pair nat address) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : @parameter%set_loan_note_contracts
                # self.data.borrower_note_address = params.borrower_note_address # pair (address %borrower_note_address) (address %collateral_vault_address) : pair (big_map address nat) (pair nat address) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : @parameter%set_loan_note_contracts
                CDR;        # address : pair (big_map address nat) (pair nat address) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : @parameter%set_loan_note_contracts
                DIG 3;      # @parameter%set_loan_note_contracts : address : pair (big_map address nat) (pair nat address) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)))
                CAR;        # address : address : pair (big_map address nat) (pair nat address) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)))
                PAIR;       # pair address address : pair (big_map address nat) (pair nat address) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)))
                PAIR;       # pair (pair address address) (pair (big_map address nat) (pair nat address)) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)))
                PAIR;       # pair (pair (pair address address) (pair (big_map address nat) (pair nat address))) (pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
              }
              {
                # == set_processing_fee ==
                # sp.verify(self.data.owner == sp.sender, 'Ownable: caller is not the owner') # @parameter%set_processing_fee : @storage
                SENDER;     # @sender : @parameter%set_processing_fee : @storage
                DUP 3;      # @storage : @sender : @parameter%set_processing_fee : @storage
                GET 5;      # address : @sender : @parameter%set_processing_fee : @storage
                COMPARE;    # int : @parameter%set_processing_fee : @storage
                EQ;         # bool : @parameter%set_processing_fee : @storage
                IF
                  {}
                  {
                    PUSH string "Ownable: caller is not the owner"; # string : @parameter%set_processing_fee : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%set_processing_fee : @storage
                # sp.verify(params <= 250, 'INVALID_FEE') # @parameter%set_processing_fee : @storage
                DUP;        # @parameter%set_processing_fee : @parameter%set_processing_fee : @storage
                PUSH nat 250; # nat : @parameter%set_processing_fee : @parameter%set_processing_fee : @storage
                SWAP;       # @parameter%set_processing_fee : nat : @parameter%set_processing_fee : @storage
                COMPARE;    # int : @parameter%set_processing_fee : @storage
                LE;         # bool : @parameter%set_processing_fee : @storage
                IF
                  {}
                  {
                    PUSH string "INVALID_FEE"; # string : @parameter%set_processing_fee : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%set_processing_fee : @storage
                # self.data.processing_fee = params # @parameter%set_processing_fee : @storage
                UPDATE 8;   # @storage
              }; # pair (pair (pair address address) (pair (big_map address nat) (pair nat address))) (pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
            NIL operation; # list operation : pair (pair (pair address address) (pair (big_map address nat) (pair nat address))) (pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
          }
          {
            IF_LEFT
              {
                DIG 2;      # lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : @parameter%start_loan : @storage
                DROP;       # @parameter%start_loan : @storage
                # == start_loan ==
                # sp.verify((self.data.permitted_currencies.contains(params.loan_denomination_contract)) == True, 'CURRENCY_NOT_AUTHORIZED') # @parameter%start_loan : @storage
                PUSH bool True; # bool : @parameter%start_loan : @storage
                DUP 3;      # @storage : bool : @parameter%start_loan : @storage
                GET 7;      # big_map address bool : bool : @parameter%start_loan : @storage
                DUP 3;      # @parameter%start_loan : big_map address bool : bool : @parameter%start_loan : @storage
                CAR;        # pair (pair (address %borrower) (address %collateral_contract)) (pair (nat %collateral_token_id) (pair (address %lender) (address %loan_denomination_contract))) : big_map address bool : bool : @parameter%start_loan : @storage
                GET 6;      # address : big_map address bool : bool : @parameter%start_loan : @storage
                MEM;        # bool : bool : @parameter%start_loan : @storage
                COMPARE;    # int : @parameter%start_loan : @storage
                EQ;         # bool : @parameter%start_loan : @storage
                IF
                  {}
                  {
                    PUSH string "CURRENCY_NOT_AUTHORIZED"; # string : @parameter%start_loan : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%start_loan : @storage
                SWAP;       # @storage : @parameter%start_loan
                # self.data.loans_by_id[self.data.loan_id] = sp.record(collateral_contract = params.collateral_contract, collateral_token_id = params.collateral_token_id, loan_denomination_contract = params.loan_denomination_contract, loan_denomination_id = params.loan_denomination_id, loan_duration = params.loan_duration, loan_origination_timestamp = sp.now, loan_principal_amount = params.loan_principal_amount, maximum_interest_amount = params.maximum_interest_amount, time_adjustable_interest = params.time_adjustable_interest) # @storage : @parameter%start_loan
                DUP;        # @storage : @storage : @parameter%start_loan
                DUG 2;      # @storage : @parameter%start_loan : @storage
                UNPAIR;     # pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : @parameter%start_loan : @storage
                SWAP;       # pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @parameter%start_loan : @storage
                UNPAIR;     # pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest)))))) : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @parameter%start_loan : @storage
                UNPAIR;     # nat : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @parameter%start_loan : @storage
                SWAP;       # big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @parameter%start_loan : @storage
                DIG 4;      # @parameter%start_loan : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @storage
                DUP;        # @parameter%start_loan : @parameter%start_loan : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @storage
                GET 8;      # bool : @parameter%start_loan : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @storage
                SWAP;       # @parameter%start_loan : bool : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @storage
                DUP;        # @parameter%start_loan : @parameter%start_loan : bool : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @storage
                DUG 6;      # @parameter%start_loan : bool : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @parameter%start_loan : @storage
                GET 7;      # nat : bool : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @parameter%start_loan : @storage
                PAIR;       # pair nat bool : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @parameter%start_loan : @storage
                DUP 6;      # @parameter%start_loan : pair nat bool : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @parameter%start_loan : @storage
                GET 5;      # nat : pair nat bool : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @parameter%start_loan : @storage
                PAIR;       # pair nat (pair nat bool) : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @parameter%start_loan : @storage
                NOW;        # @now : pair nat (pair nat bool) : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @parameter%start_loan : @storage
                DUP 7;      # @parameter%start_loan : @now : pair nat (pair nat bool) : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @parameter%start_loan : @storage
                GET 3;      # pair (nat %loan_denomination_id) (int %loan_duration) : @now : pair nat (pair nat bool) : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @parameter%start_loan : @storage
                CDR;        # int : @now : pair nat (pair nat bool) : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @parameter%start_loan : @storage
                PAIR;       # pair int @now : pair nat (pair nat bool) : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @parameter%start_loan : @storage
                PAIR;       # pair (pair int @now) (pair nat (pair nat bool)) : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @parameter%start_loan : @storage
                DIG 5;      # @parameter%start_loan : pair (pair int @now) (pair nat (pair nat bool)) : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @storage
                DUP;        # @parameter%start_loan : @parameter%start_loan : pair (pair int @now) (pair nat (pair nat bool)) : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @storage
                GET 3;      # pair (nat %loan_denomination_id) (int %loan_duration) : @parameter%start_loan : pair (pair int @now) (pair nat (pair nat bool)) : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @storage
                CAR;        # nat : @parameter%start_loan : pair (pair int @now) (pair nat (pair nat bool)) : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @storage
                SWAP;       # @parameter%start_loan : nat : pair (pair int @now) (pair nat (pair nat bool)) : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @storage
                DUP;        # @parameter%start_loan : @parameter%start_loan : nat : pair (pair int @now) (pair nat (pair nat bool)) : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @storage
                DUG 7;      # @parameter%start_loan : nat : pair (pair int @now) (pair nat (pair nat bool)) : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @parameter%start_loan : @storage
                CAR;        # pair (pair (address %borrower) (address %collateral_contract)) (pair (nat %collateral_token_id) (pair (address %lender) (address %loan_denomination_contract))) : nat : pair (pair int @now) (pair nat (pair nat bool)) : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @parameter%start_loan : @storage
                GET 6;      # address : nat : pair (pair int @now) (pair nat (pair nat bool)) : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @parameter%start_loan : @storage
                PAIR;       # pair address nat : pair (pair int @now) (pair nat (pair nat bool)) : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @parameter%start_loan : @storage
                DIG 6;      # @parameter%start_loan : pair address nat : pair (pair int @now) (pair nat (pair nat bool)) : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @storage
                DUP;        # @parameter%start_loan : @parameter%start_loan : pair address nat : pair (pair int @now) (pair nat (pair nat bool)) : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @storage
                CAR;        # pair (pair (address %borrower) (address %collateral_contract)) (pair (nat %collateral_token_id) (pair (address %lender) (address %loan_denomination_contract))) : @parameter%start_loan : pair address nat : pair (pair int @now) (pair nat (pair nat bool)) : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @storage
                GET 3;      # nat : @parameter%start_loan : pair address nat : pair (pair int @now) (pair nat (pair nat bool)) : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @storage
                SWAP;       # @parameter%start_loan : nat : pair address nat : pair (pair int @now) (pair nat (pair nat bool)) : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @storage
                DUP;        # @parameter%start_loan : @parameter%start_loan : nat : pair address nat : pair (pair int @now) (pair nat (pair nat bool)) : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @storage
                DUG 8;      # @parameter%start_loan : nat : pair address nat : pair (pair int @now) (pair nat (pair nat bool)) : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @parameter%start_loan : @storage
                CAR;        # pair (pair (address %borrower) (address %collateral_contract)) (pair (nat %collateral_token_id) (pair (address %lender) (address %loan_denomination_contract))) : nat : pair address nat : pair (pair int @now) (pair nat (pair nat bool)) : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @parameter%start_loan : @storage
                CAR;        # pair (address %borrower) (address %collateral_contract) : nat : pair address nat : pair (pair int @now) (pair nat (pair nat bool)) : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @parameter%start_loan : @storage
                CDR;        # address : nat : pair address nat : pair (pair int @now) (pair nat (pair nat bool)) : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @parameter%start_loan : @storage
                PAIR;       # pair address nat : pair address nat : pair (pair int @now) (pair nat (pair nat bool)) : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @parameter%start_loan : @storage
                PAIR;       # pair (pair address nat) (pair address nat) : pair (pair int @now) (pair nat (pair nat bool)) : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @parameter%start_loan : @storage
                PAIR;       # pair (pair (pair address nat) (pair address nat)) (pair (pair int @now) (pair nat (pair nat bool))) : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @parameter%start_loan : @storage
                SOME;       # option (pair (pair (pair address nat) (pair address nat)) (pair (pair int @now) (pair nat (pair nat bool)))) : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @parameter%start_loan : @storage
                DIG 6;      # @storage : option (pair (pair (pair address nat) (pair address nat)) (pair (pair int @now) (pair nat (pair nat bool)))) : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @parameter%start_loan
                GET 3;      # pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest)))))) : option (pair (pair (pair address nat) (pair address nat)) (pair (pair int @now) (pair nat (pair nat bool)))) : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @parameter%start_loan
                CAR;        # nat : option (pair (pair (pair address nat) (pair address nat)) (pair (pair int @now) (pair nat (pair nat bool)))) : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @parameter%start_loan
                UPDATE;     # big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))) : nat : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @parameter%start_loan
                SWAP;       # nat : big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))) : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @parameter%start_loan
                PAIR;       # pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool))))) : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @parameter%start_loan
                PAIR;       # pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : @parameter%start_loan
                SWAP;       # pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : @parameter%start_loan
                PAIR;       # pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)))) : @parameter%start_loan
                SWAP;       # @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                # sp.transfer(sp.record(amount = 1, collateral_contract = params.collateral_contract, collateral_token_id = params.collateral_token_id, deposit_id = self.data.loan_id, depositor = params.borrower), sp.tez(0), sp.contract(sp.TRecord(amount = sp.TNat, collateral_contract = sp.TAddress, collateral_token_id = sp.TNat, deposit_id = sp.TNat, depositor = sp.TAddress).layout((("amount", "collateral_contract"), ("collateral_token_id", ("deposit_id", "depositor")))), self.data.collateral_vault_address, entry_point='deposit').open_some()) # @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                NIL operation; # list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                DUP 3;      # pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)))) : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CAR;        # pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CAR;        # pair (address %borrower_note_address) (address %collateral_vault_address) : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CDR;        # address : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CONTRACT %deposit (pair (pair (nat %amount) (address %collateral_contract)) (pair (nat %collateral_token_id) (pair (nat %deposit_id) (address %depositor)))); # option (contract (pair (pair (nat %amount) (address %collateral_contract)) (pair (nat %collateral_token_id) (pair (nat %deposit_id) (address %depositor))))) : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                IF_NONE
                  {
                    PUSH int 305; # int : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                PUSH mutez 0; # mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                DUP 4;      # @parameter%start_loan : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CAR;        # pair (pair (address %borrower) (address %collateral_contract)) (pair (nat %collateral_token_id) (pair (address %lender) (address %loan_denomination_contract))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CAR;        # pair (address %borrower) (address %collateral_contract) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CAR;        # address : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                DUP 6;      # pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)))) : address : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                GET 3;      # pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool))))) : address : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CAR;        # nat : address : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                PAIR;       # pair nat address : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                DUP 5;      # @parameter%start_loan : pair nat address : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CAR;        # pair (pair (address %borrower) (address %collateral_contract)) (pair (nat %collateral_token_id) (pair (address %lender) (address %loan_denomination_contract))) : pair nat address : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                GET 3;      # nat : pair nat address : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                PAIR;       # pair nat (pair nat address) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                DUP 5;      # @parameter%start_loan : pair nat (pair nat address) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CAR;        # pair (pair (address %borrower) (address %collateral_contract)) (pair (nat %collateral_token_id) (pair (address %lender) (address %loan_denomination_contract))) : pair nat (pair nat address) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CAR;        # pair (address %borrower) (address %collateral_contract) : pair nat (pair nat address) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CDR;        # address : pair nat (pair nat address) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                PUSH nat 1; # nat : address : pair nat (pair nat address) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                PAIR;       # pair nat address : pair nat (pair nat address) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                PAIR;       # pair (pair nat address) (pair nat (pair nat address)) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                TRANSFER_TOKENS; # operation : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CONS;       # list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                SWAP;       # @parameter%start_loan : list operation : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                # sp.transfer(sp.list([sp.set_type_expr(sp.record(from_ = params.lender, txs = sp.list([sp.record(to_ = sp.self_address, token_id = params.loan_denomination_id, amount = params.loan_principal_amount)])), sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs")))]), sp.tez(0), sp.contract(sp.TList(sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs"))), params.loan_denomination_contract, entry_point='transfer').open_some()) # @parameter%start_loan : list operation : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                DUP;        # @parameter%start_loan : @parameter%start_loan : list operation : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                DUG 2;      # @parameter%start_loan : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CAR;        # pair (pair (address %borrower) (address %collateral_contract)) (pair (nat %collateral_token_id) (pair (address %lender) (address %loan_denomination_contract))) : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                GET 6;      # address : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CONTRACT %transfer (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))); # option (contract (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))))) : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                IF_NONE
                  {
                    PUSH int 82; # int : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                PUSH mutez 0; # mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                NIL (pair address (list (pair address (pair nat nat)))); # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                NIL (pair address (pair nat nat)); # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                DIG 5;      # @parameter%start_loan : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                DUP;        # @parameter%start_loan : @parameter%start_loan : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                GET 5;      # nat : @parameter%start_loan : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                SWAP;       # @parameter%start_loan : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                DUP;        # @parameter%start_loan : @parameter%start_loan : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                DUG 7;      # @parameter%start_loan : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                GET 3;      # pair (nat %loan_denomination_id) (int %loan_duration) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CAR;        # nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                SELF_ADDRESS; # @self : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                PAIR 3;     # pair @self (pair nat nat) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CONS;       # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                DUP 6;      # @parameter%start_loan : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CAR;        # pair (pair (address %borrower) (address %collateral_contract)) (pair (nat %collateral_token_id) (pair (address %lender) (address %loan_denomination_contract))) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                GET 5;      # address : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                PAIR;       # pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CONS;       # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                TRANSFER_TOKENS; # operation : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CONS;       # list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                SWAP;       # @parameter%start_loan : list operation : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                # sp.transfer(sp.list([sp.set_type_expr(sp.record(from_ = sp.self_address, txs = sp.list([sp.record(to_ = params.borrower, token_id = params.loan_denomination_id, amount = sp.as_nat(params.loan_principal_amount - ((params.loan_principal_amount * ((self.data.processing_fee * self.data.currency_precision[params.loan_denomination_contract]) // 10000)) // self.data.currency_precision[params.loan_denomination_contract])))])), sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs")))]), sp.tez(0), sp.contract(sp.TList(sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs"))), params.loan_denomination_contract, entry_point='transfer').open_some()) # @parameter%start_loan : list operation : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                DUP;        # @parameter%start_loan : @parameter%start_loan : list operation : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                DUG 2;      # @parameter%start_loan : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CAR;        # pair (pair (address %borrower) (address %collateral_contract)) (pair (nat %collateral_token_id) (pair (address %lender) (address %loan_denomination_contract))) : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                GET 6;      # address : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CONTRACT %transfer (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))); # option (contract (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))))) : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                IF_NONE
                  {
                    PUSH int 82; # int : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                PUSH mutez 0; # mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                NIL (pair address (list (pair address (pair nat nat)))); # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                NIL (pair address (pair nat nat)); # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                DUP 7;      # pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)))) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CAR;        # pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                GET 3;      # big_map address nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                DUP 7;      # @parameter%start_loan : big_map address nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CAR;        # pair (pair (address %borrower) (address %collateral_contract)) (pair (nat %collateral_token_id) (pair (address %lender) (address %loan_denomination_contract))) : big_map address nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                GET 6;      # address : big_map address nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                GET;        # option nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                IF_NONE
                  {
                    PUSH int 86; # int : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:86 # @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                  }; # @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                PUSH nat 10000; # nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                DUP 9;      # pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)))) : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CAR;        # pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                GET 3;      # big_map address nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                DUP 9;      # @parameter%start_loan : big_map address nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CAR;        # pair (pair (address %borrower) (address %collateral_contract)) (pair (nat %collateral_token_id) (pair (address %lender) (address %loan_denomination_contract))) : big_map address nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                GET 6;      # address : big_map address nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                GET;        # option nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                IF_NONE
                  {
                    PUSH int 86; # int : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:86 # @some : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                  }; # @some : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                DUP 10;     # pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)))) : @some : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                GET 8;      # nat : @some : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                MUL;        # nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                EDIV;       # option (pair nat nat) : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                IF_NONE
                  {
                    PUSH int 301; # int : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                    FAILWITH;   # FAILED
                  }
                  {
                    CAR;        # nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                  }; # nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                DUP 8;      # @parameter%start_loan : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                GET 5;      # nat : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                MUL;        # nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                EDIV;       # option (pair nat nat) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                IF_NONE
                  {
                    PUSH int 302; # int : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                    FAILWITH;   # FAILED
                  }
                  {
                    CAR;        # nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                  }; # nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                DUP 7;      # @parameter%start_loan : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                GET 5;      # nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                SUB;        # int : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                ISNAT;      # option nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                IF_NONE
                  {
                    PUSH int 90; # int : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                DIG 6;      # @parameter%start_loan : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                DUP;        # @parameter%start_loan : @parameter%start_loan : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                GET 3;      # pair (nat %loan_denomination_id) (int %loan_duration) : @parameter%start_loan : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CAR;        # nat : @parameter%start_loan : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                SWAP;       # @parameter%start_loan : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                DUP;        # @parameter%start_loan : @parameter%start_loan : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                DUG 8;      # @parameter%start_loan : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CAR;        # pair (pair (address %borrower) (address %collateral_contract)) (pair (nat %collateral_token_id) (pair (address %lender) (address %loan_denomination_contract))) : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CAR;        # pair (address %borrower) (address %collateral_contract) : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CAR;        # address : nat : @some : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                PAIR 3;     # pair address (pair nat @some) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CONS;       # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                SELF_ADDRESS; # @self : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                PAIR;       # pair @self (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CONS;       # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                TRANSFER_TOKENS; # operation : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CONS;       # list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                # sp.transfer(sp.list([sp.set_type_expr(sp.record(token_id = self.data.loan_id, to = params.borrower, metadata = {'decimals' : sp.bytes('0x30'), 'name' : sp.bytes('0x4c656e64696e67204c6f616e4e6f7465'), 'symbol' : sp.bytes('0x4c4e')}), sp.TRecord(metadata = sp.TMap(sp.TString, sp.TBytes), to = sp.TAddress, token_id = sp.TNat).layout(("token_id", ("to", "metadata"))))]), sp.tez(0), sp.contract(sp.TList(sp.TRecord(metadata = sp.TMap(sp.TString, sp.TBytes), to = sp.TAddress, token_id = sp.TNat).layout(("token_id", ("to", "metadata")))), self.data.borrower_note_address, entry_point='mint').open_some()) # list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                DUP 3;      # pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)))) : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CAR;        # pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CAR;        # pair (address %borrower_note_address) (address %collateral_vault_address) : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CAR;        # address : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CONTRACT %mint (list (pair (nat %token_id) (pair (address %to) (map %metadata string bytes)))); # option (contract (list (pair (nat %token_id) (pair (address %to) (map %metadata string bytes))))) : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                IF_NONE
                  {
                    PUSH int 70; # int : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                PUSH mutez 0; # mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                NIL (pair nat (pair address (map string bytes))); # list (pair nat (pair address (map string bytes))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                PUSH (map string bytes) {Elt "decimals" 0x30; Elt "name" 0x4c656e64696e67204c6f616e4e6f7465; Elt "symbol" 0x4c4e}; # map string bytes : list (pair nat (pair address (map string bytes))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                DUP 6;      # @parameter%start_loan : map string bytes : list (pair nat (pair address (map string bytes))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CAR;        # pair (pair (address %borrower) (address %collateral_contract)) (pair (nat %collateral_token_id) (pair (address %lender) (address %loan_denomination_contract))) : map string bytes : list (pair nat (pair address (map string bytes))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CAR;        # pair (address %borrower) (address %collateral_contract) : map string bytes : list (pair nat (pair address (map string bytes))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CAR;        # address : map string bytes : list (pair nat (pair address (map string bytes))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                DUP 8;      # pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)))) : address : map string bytes : list (pair nat (pair address (map string bytes))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                GET 3;      # pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool))))) : address : map string bytes : list (pair nat (pair address (map string bytes))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CAR;        # nat : address : map string bytes : list (pair nat (pair address (map string bytes))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                PAIR 3;     # pair nat (pair address (map string bytes)) : list (pair nat (pair address (map string bytes))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CONS;       # list (pair nat (pair address (map string bytes))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                TRANSFER_TOKENS; # operation : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CONS;       # list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                # sp.transfer(sp.list([sp.set_type_expr(sp.record(token_id = self.data.loan_id, to = params.lender, metadata = {'decimals' : sp.bytes('0x30'), 'name' : sp.bytes('0x4c656e64696e67204c6f616e4e6f7465'), 'symbol' : sp.bytes('0x4c4e')}), sp.TRecord(metadata = sp.TMap(sp.TString, sp.TBytes), to = sp.TAddress, token_id = sp.TNat).layout(("token_id", ("to", "metadata"))))]), sp.tez(0), sp.contract(sp.TList(sp.TRecord(metadata = sp.TMap(sp.TString, sp.TBytes), to = sp.TAddress, token_id = sp.TNat).layout(("token_id", ("to", "metadata")))), self.data.lender_note_address, entry_point='mint').open_some()) # list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                DUP 3;      # pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)))) : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CAR;        # pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                GET 6;      # address : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CONTRACT %mint (list (pair (nat %token_id) (pair (address %to) (map %metadata string bytes)))); # option (contract (list (pair (nat %token_id) (pair (address %to) (map %metadata string bytes))))) : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                IF_NONE
                  {
                    PUSH int 70; # int : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                PUSH mutez 0; # mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                NIL (pair nat (pair address (map string bytes))); # list (pair nat (pair address (map string bytes))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                PUSH (map string bytes) {Elt "decimals" 0x30; Elt "name" 0x4c656e64696e67204c6f616e4e6f7465; Elt "symbol" 0x4c4e}; # map string bytes : list (pair nat (pair address (map string bytes))) : mutez : @some : list operation : @parameter%start_loan : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                DIG 5;      # @parameter%start_loan : map string bytes : list (pair nat (pair address (map string bytes))) : mutez : @some : list operation : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CAR;        # pair (pair (address %borrower) (address %collateral_contract)) (pair (nat %collateral_token_id) (pair (address %lender) (address %loan_denomination_contract))) : map string bytes : list (pair nat (pair address (map string bytes))) : mutez : @some : list operation : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                GET 5;      # address : map string bytes : list (pair nat (pair address (map string bytes))) : mutez : @some : list operation : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                DUP 7;      # pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)))) : address : map string bytes : list (pair nat (pair address (map string bytes))) : mutez : @some : list operation : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                GET 3;      # pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool))))) : address : map string bytes : list (pair nat (pair address (map string bytes))) : mutez : @some : list operation : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CAR;        # nat : address : map string bytes : list (pair nat (pair address (map string bytes))) : mutez : @some : list operation : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                PAIR 3;     # pair nat (pair address (map string bytes)) : list (pair nat (pair address (map string bytes))) : mutez : @some : list operation : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CONS;       # list (pair nat (pair address (map string bytes))) : mutez : @some : list operation : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                CONS;       # list operation : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                SWAP;       # pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)))) : list operation
                # self.data.loan_id += 1 # pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)))) : list operation
                UNPAIR;     # pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : list operation
                SWAP;       # pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : list operation
                UNPAIR;     # pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool))))) : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : list operation
                UNPAIR;     # nat : big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))) : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : list operation
                PUSH nat 1; # nat : nat : big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))) : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : list operation
                ADD;        # nat : big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))) : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : list operation
                PAIR;       # pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool))))) : pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : list operation
                PAIR;       # pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : list operation
                SWAP;       # pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : list operation
                PAIR;       # pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)))) : list operation
                SWAP;       # list operation : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
              }
              {
                DIG 2;      # lambda (pair (pair nat int) (pair timestamp (pair nat bool))) nat : @parameter%whitelist_currency : @storage
                DROP;       # @parameter%whitelist_currency : @storage
                # == whitelist_currency ==
                # sp.verify(self.data.owner == sp.sender, 'Ownable: caller is not the owner') # @parameter%whitelist_currency : @storage
                SENDER;     # @sender : @parameter%whitelist_currency : @storage
                DUP 3;      # @storage : @sender : @parameter%whitelist_currency : @storage
                GET 5;      # address : @sender : @parameter%whitelist_currency : @storage
                COMPARE;    # int : @parameter%whitelist_currency : @storage
                EQ;         # bool : @parameter%whitelist_currency : @storage
                IF
                  {}
                  {
                    PUSH string "Ownable: caller is not the owner"; # string : @parameter%whitelist_currency : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%whitelist_currency : @storage
                SWAP;       # @storage : @parameter%whitelist_currency
                # self.data.permitted_currencies[params.currency] = True # @storage : @parameter%whitelist_currency
                DUP;        # @storage : @storage : @parameter%whitelist_currency
                GET 7;      # big_map address bool : @storage : @parameter%whitelist_currency
                PUSH (option bool) (Some True); # option bool : big_map address bool : @storage : @parameter%whitelist_currency
                DUP 4;      # @parameter%whitelist_currency : option bool : big_map address bool : @storage : @parameter%whitelist_currency
                CAR;        # address : option bool : big_map address bool : @storage : @parameter%whitelist_currency
                UPDATE;     # big_map address bool : @storage : @parameter%whitelist_currency
                UPDATE 7;   # @storage : @parameter%whitelist_currency
                # self.data.currency_precision[params.currency] = params.precision # @storage : @parameter%whitelist_currency
                UNPAIR;     # pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address))) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : @parameter%whitelist_currency
                UNPAIR;     # pair (address %borrower_note_address) (address %collateral_vault_address) : pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : @parameter%whitelist_currency
                SWAP;       # pair (big_map %currency_precision address nat) (pair (nat %interest_fee) (address %lender_note_address)) : pair (address %borrower_note_address) (address %collateral_vault_address) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : @parameter%whitelist_currency
                UNPAIR;     # big_map address nat : pair (nat %interest_fee) (address %lender_note_address) : pair (address %borrower_note_address) (address %collateral_vault_address) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : @parameter%whitelist_currency
                DUP 5;      # @parameter%whitelist_currency : big_map address nat : pair (nat %interest_fee) (address %lender_note_address) : pair (address %borrower_note_address) (address %collateral_vault_address) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : @parameter%whitelist_currency
                CDR;        # nat : big_map address nat : pair (nat %interest_fee) (address %lender_note_address) : pair (address %borrower_note_address) (address %collateral_vault_address) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : @parameter%whitelist_currency
                SOME;       # option nat : big_map address nat : pair (nat %interest_fee) (address %lender_note_address) : pair (address %borrower_note_address) (address %collateral_vault_address) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))) : @parameter%whitelist_currency
                DIG 5;      # @parameter%whitelist_currency : option nat : big_map address nat : pair (nat %interest_fee) (address %lender_note_address) : pair (address %borrower_note_address) (address %collateral_vault_address) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)))
                CAR;        # address : option nat : big_map address nat : pair (nat %interest_fee) (address %lender_note_address) : pair (address %borrower_note_address) (address %collateral_vault_address) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)))
                UPDATE;     # big_map address nat : pair (nat %interest_fee) (address %lender_note_address) : pair (address %borrower_note_address) (address %collateral_vault_address) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)))
                PAIR;       # pair (big_map address nat) (pair (nat %interest_fee) (address %lender_note_address)) : pair (address %borrower_note_address) (address %collateral_vault_address) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)))
                SWAP;       # pair (address %borrower_note_address) (address %collateral_vault_address) : pair (big_map address nat) (pair (nat %interest_fee) (address %lender_note_address)) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)))
                PAIR;       # pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map address nat) (pair (nat %interest_fee) (address %lender_note_address))) : pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)))
                PAIR;       # pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
                NIL operation; # list operation : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
              }; # list operation : pair (pair (pair (address %borrower_note_address) (address %collateral_vault_address)) (pair (big_map address nat) (pair (nat %interest_fee) (address %lender_note_address)))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
          }; # list operation : pair (pair (pair address address) (pair (big_map address nat) (pair nat address))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
      }; # list operation : pair (pair (pair address address) (pair (big_map address nat) (pair nat address))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
    NIL operation; # list operation : list operation : pair (pair (pair address address) (pair (big_map address nat) (pair nat address))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
    SWAP;       # list operation : list operation : pair (pair (pair address address) (pair (big_map address nat) (pair nat address))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
    ITER
      {
        CONS;       # list operation : pair (pair (pair address address) (pair (big_map address nat) (pair nat address))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
      }; # list operation : pair (pair (pair address address) (pair (big_map address nat) (pair nat address))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee))))
    PAIR;       # pair (list operation) (pair (pair (pair address address) (pair (big_map address nat) (pair nat address))) (pair (pair nat (big_map nat (pair (pair (pair address nat) (pair address nat)) (pair (pair int timestamp) (pair nat (pair nat bool)))))) (pair (address %owner) (pair (big_map %permitted_currencies address bool) (nat %processing_fee)))))
  };
view
  "get_loan_by_id" nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest)))))
  {
    UNPAIR;     # @parameter : @storage
    SWAP;       # @storage : @parameter
    # sp.result(self.data.loans_by_id[params]) # @storage : @parameter
    GET 3;      # pair (nat %loan_id) (big_map %loans_by_id nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest)))))) : @parameter
    CDR;        # big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest))))) : @parameter
    SWAP;       # @parameter : big_map nat (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest)))))
    GET;        # option (pair (pair (pair (address %collateral_contract) (nat %collateral_token_id)) (pair (address %loan_denomination_contract) (nat %loan_denomination_id))) (pair (pair (int %loan_duration) (timestamp %loan_origination_timestamp)) (pair (nat %loan_principal_amount) (pair (nat %maximum_interest_amount) (bool %time_adjustable_interest)))))
    IF_NONE
      {
        PUSH int 237; # int
        FAILWITH;   # FAILED
      }
      {
        # of_some: Get-item:237 # @some
      }; # @some
  };